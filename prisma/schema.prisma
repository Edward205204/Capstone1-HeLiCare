// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum CareLogType {
  meal
  exercise
  hygiene
  medication
  custom
}

enum CareTaskStatus {
  pending
  in_progress
  completed
}

enum MedicationStatus {
  scheduled
  administered
  skipped
}

enum AlertType {
  SOS
  HealthAnomaly
  OverduePayment
  LowStock
  FullRoom
}

enum NotificationType {
  Alert
  ServiceSuggestion
  PaymentReminder
  VisitReminder
}

enum ServiceType {
  base
  add_on
  special
}

enum ContractStatus {
  active
  expired
  cancelled
}

enum ContractServiceStatus {
  active
  expired
  cancelled
}

enum PaymentFrequency {
  monthly
  annually
}

enum PaymentStatus {
  paid
  overdue
  pending
}

enum SpecialCareStatus {
  suggested
  accepted
  declined
  active
  completed
}

enum ActivityStatus {
  planned
  participated
  did_not_participate
}

enum VisitStatus {
  pending
  approved
  rejected
  completed
}

enum InvitationStatus {
  sent
  accepted
  expired
}

enum ActivityType {
  physical_exercise
  mental_activity
  social_interaction
  meal_time
  medical_checkup
  therapy
  entertainment
  education
  religious_service
  other
}

enum ScheduleFrequency {
  daily
  weekly
  monthly
  one_time
  custom
}

enum UserRole {
  PlatformSuperAdmin
  RootAdmin
  Admin
  Staff
  Family
  Resident
}

enum StaffPosition {
  NURSE              // Y tá chăm sóc trực tiếp
  CAREGIVER          // Nhân viên chăm sóc, hỗ trợ sinh hoạt hằng ngày
  THERAPIST          // Vật lý trị liệu / occupational therapy
  PHYSICIAN          // Bác sĩ theo dõi sức khỏe
  SOCIAL_WORKER      // Nhân viên xã hội, tư vấn tâm lý
  ACTIVITY_COORDINATOR // Điều phối hoạt động, giải trí
  DIETITIAN          // Chuyên viên dinh dưỡng
  OTHER              // Các vị trí khác
}


enum CognitiveStatus {
  NORMAL
  IMPAIRED
  SEVERE
}

enum MobilityStatus {
  INDEPENDENT
  ASSISTED
  DEPENDENT
}

enum RoomType {
  single
  double
  multi
}

enum PaymentMethod {
  // cash
  // bank_transfer
  paypal
}



enum FamilyLinkStatus {
  pending
  active
  revoked
}

enum TokenType {
  AccessToken
  RefreshToken
  EmailVerifyToken
  ForgotPasswordToken
  StaffInviteToken
  AdminInviteToken
  FamilyLinkToken
}

enum UserStatus {
  active
  inactive
}

enum InstitutionContractStatus {
  active
  cancelled
}

enum Gender {
  male
  female
}


enum ResidentAssessmentStatus {
  pending // tạo lịch hẹn
  canceled // hủy khám
  completed // khám xong
  joined // tham gia vào viện
  rejected // từ chối chung
}

enum DiseaseSeverity {
  MILD
  MODERATE
  SEVERE
}

enum DiseaseStatus {
  ACTIVE
  RECOVERED
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
}

model Institution {
  institution_id String   @id @default(uuid())
  name           String
  address        Json    
  contact_info   Json   
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  status         InstitutionContractStatus @default(active)

  users     User[]
  rooms     Room[]
  residents Resident[]
  staffProfiles StaffProfile[]
  visits    Visit[]
  familyResidentLinks FamilyResidentLink[]
  residentApplications ResidentApplication[]
  activities Activity[]
  schedules Schedule[]
  careLogs  CareLog[]
}

model User {
  user_id                  String   @id @default(uuid())
  password                 String 
  email                    String   @unique
  role                     UserRole
  status                   UserStatus @default(inactive)
  institution_id           String?   
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  institution              Institution?       @relation(fields: [institution_id], references: [institution_id])
  familyProfile            FamilyProfile?
  userTokens               UserToken[]
  // residentApplication      ResidentApplication[]
  assignedResidents        Resident[] @relation("AssignedStaff")
  resident                 Resident? @relation("ResidentUser")
  staffProfile             StaffProfile?
  familyResidentLinks      FamilyResidentLink[]
  familyVisits             Visit[] @relation("FamilyVisits")
  approvedVisits           Visit[] @relation("VisitApprover")
  healthAssessments        HealthAssessment[] @relation("StaffAssessments")
  staffSchedules           Schedule[] @relation("StaffSchedules")
  staffCareLogs            CareLog[] @relation("StaffCareLogs")
}

model StaffProfile {
  user_id       String   @unique @id
  institution_id String 
  full_name     String
  phone         String
  position      StaffPosition
  hire_date     DateTime   @default(now())
  notes         String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user         User        @relation(fields: [user_id], references: [user_id])
  institution  Institution @relation(fields: [institution_id], references: [institution_id])
}

model FamilyProfile {
  profile_id String   @id @default(uuid())
  user_id    String   @unique
  full_name  String
  phone      String?
  address    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [user_id])
}

model UserToken {
  token_id      String   @id @default(uuid())
  user_id       String
  token_string String   @unique
  token_type   TokenType
  exp          Int
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])
  @@index([user_id, token_type])
}

model Resident {
  resident_id       String   @id @default(uuid())
  user_id           String?  @unique   
  institution_id    String?
  room_id           String?
  full_name         String
  gender            Gender
  date_of_birth     DateTime
  
  notes             String?
  assigned_staff_id String?
  admission_date    DateTime?
  created_at        DateTime @default(now())

  chronicDiseases   ChronicDisease[]
  allergies         Allergy[]

  user           User?        @relation("ResidentUser", fields: [user_id], references: [user_id])

  institution    Institution?  @relation(fields: [institution_id], references: [institution_id])
  room           Room?        @relation(fields: [room_id], references: [room_id])

  assigned_staff User?        @relation("AssignedStaff", fields: [assigned_staff_id], references: [user_id])
  familyResidentLinks FamilyResidentLink[]
  visits         Visit[]
  healthAssessments HealthAssessment[]
  schedules Schedule[]
  careLogs CareLog[]
}

model HealthAssessment {
  assessment_id   String    @id @default(uuid())
  resident_id     String   
  assessed_by_id  String  

  cognitive_status  CognitiveStatus @default(NORMAL)
  mobility_status   MobilityStatus @default(INDEPENDENT)
  weight_kg         Float?
  height_cm         Float?
  bmi               Float?
  
  temperature_c     Float?
  blood_pressure_systolic   Int?
  blood_pressure_diastolic  Int?
  heart_rate        Int?
  respiratory_rate  Int?
  oxygen_saturation Int?

  notes             String?   
  created_at        DateTime  @default(now())

  resident         Resident  @relation(fields: [resident_id], references: [resident_id])
  assessed_by      User      @relation("StaffAssessments", fields: [assessed_by_id], references: [user_id])
  @@index([resident_id])
}

// Bệnh mãn tính
model ChronicDisease {
  id           String   @id @default(uuid())
  resident_id  String
  name         String                     // Tên bệnh
  diagnosed_at DateTime?                  // Ngày phát hiện
  severity     DiseaseSeverity?           // Mức độ (enum)
  status       DiseaseStatus? @default(ACTIVE) // Còn mắc / đã khỏi
  note         String?                    // Ghi chú thêm
  created_at   DateTime   @default(now())

  resident     Resident  @relation(fields: [resident_id], references: [resident_id])
}

// Dị ứng
model Allergy {
  id           String   @id @default(uuid())
  resident_id  String
  substance    String                     // Tác nhân gây dị ứng
  reaction     String?                    // Phản ứng (vd: phát ban, khó thở)
  severity     AllergySeverity?           // Mức độ phản ứng
  note         String?
  created_at   DateTime   @default(now())

  resident     Resident  @relation(fields: [resident_id], references: [resident_id])
}




model Room {
  room_id           String   @id @default(uuid())
  institution_id    String
  room_number       String
  type              RoomType
  capacity          Int
  is_available      Boolean
  current_occupancy Int
  notes             String?

  institution Institution @relation(fields: [institution_id], references: [institution_id])
  residents   Resident[]
}

model FamilyResidentLink {
  link_id         String         @id @default(uuid())
  family_user_id  String
  resident_id     String
  institution_id  String
  status          FamilyLinkStatus @default(pending)
  created_at      DateTime       @default(now())

  family_user     User           @relation(fields: [family_user_id], references: [user_id])
  resident        Resident       @relation(fields: [resident_id], references: [resident_id])
  institution     Institution    @relation(fields: [institution_id], references: [institution_id])
  @@unique([family_user_id, resident_id])
}

model ResidentApplication {
  application_id String   @id @default(uuid())
  family_user_id String? 
  resident_id    String
  institution_id String
  appointment_date DateTime 
  status         ResidentAssessmentStatus @default(pending)
  created_at     DateTime @default(now())
  institution    Institution    @relation(fields: [institution_id], references: [institution_id])
}

// Activity Management Models
model Activity {
  activity_id    String       @id @default(uuid())
  institution_id String
  name           String
  description    String?
  type           ActivityType
  duration_minutes Int?
  max_participants Int?
  is_active      Boolean      @default(true)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  institution    Institution  @relation(fields: [institution_id], references: [institution_id])
  schedules      Schedule[]
  careLogs       CareLog[]
  @@index([institution_id])
}

model Schedule {
  schedule_id    String           @id @default(uuid())
  activity_id    String
  institution_id String
  resident_id    String?
  staff_id       String?
  
  title          String
  description    String?
  start_time     DateTime
  end_time       DateTime
  frequency      ScheduleFrequency @default(one_time)
  is_recurring   Boolean          @default(false)
  recurring_until DateTime?
  
  status         ActivityStatus   @default(planned)
  notes          String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  activity       Activity         @relation(fields: [activity_id], references: [activity_id])
  institution    Institution      @relation(fields: [institution_id], references: [institution_id])
  resident       Resident?        @relation(fields: [resident_id], references: [resident_id])
  staff          User?            @relation("StaffSchedules", fields: [staff_id], references: [user_id])
  careLogs       CareLog[]
  @@index([institution_id, start_time])
  @@index([resident_id])
}

model CareLog {
  care_log_id    String       @id @default(uuid())
  resident_id    String
  staff_id       String
  activity_id    String?
  schedule_id    String?
  institution_id String
  
  type           CareLogType
  title          String
  description    String?
  start_time     DateTime
  end_time       DateTime?
  status         CareTaskStatus @default(pending)
  
  // Medication specific fields
  medication_name String?
  dosage         String?
  medication_status MedicationStatus?
  
  // Meal specific fields
  meal_type      String? // breakfast, lunch, dinner, snack
  food_items     String?
  quantity       String?
  
  // Exercise specific fields
  exercise_type  String?
  duration_minutes Int?
  intensity      String? // low, medium, high
  
  notes          String?
  created_at     DateTime @default(now())
}

model Visit {
  visit_id       String     @id @default(uuid())
  family_user_id String
  resident_id    String
  institution_id String
  visit_date     DateTime
  visit_time     String     // Format: "HH:MM" (e.g., "09:00", "14:30")
  duration       Int        // Duration in minutes (default 60)
  purpose        String?    // Purpose of visit
  notes          String?    // Additional notes
  status         VisitStatus @default(pending)
  approved_by    String?    // User ID who approved (Admin/Staff)
  approved_at    DateTime?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  family_user    User       @relation("FamilyVisits", fields: [family_user_id], references: [user_id])
  resident       Resident   @relation(fields: [resident_id], references: [resident_id])
  institution    Institution @relation(fields: [institution_id], references: [institution_id])
  approver       User?      @relation("VisitApprover", fields: [approved_by], references: [user_id])

  @@unique([family_user_id, visit_date, visit_time])
  @@index([visit_date, status])
  @@index([institution_id, visit_date])
}
  updated_at     DateTime @updatedAt

  resident       Resident     @relation(fields: [resident_id], references: [resident_id])
  staff          User         @relation("StaffCareLogs", fields: [staff_id], references: [user_id])
  activity       Activity?    @relation(fields: [activity_id], references: [activity_id])
  schedule       Schedule?    @relation(fields: [schedule_id], references: [schedule_id])
  institution    Institution  @relation(fields: [institution_id], references: [institution_id])
  @@index([resident_id, start_time])
  @@index([staff_id])
  @@index([institution_id])
}

